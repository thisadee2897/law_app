// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/database/models/category_form_model.dart';
import 'core/database/models/form_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 5588003524868428635),
    name: 'CategoryFormModel',
    lastPropertyId: const obx_int.IdUid(7, 2395836971727926811),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3401349033596523051),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 942281868437445780),
        name: 'categoryFormName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6672390356910706941),
        name: 'categoryFormFullName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2902330201501160363),
        name: 'categoryFormImage',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6147847905111582867),
        name: 'categoryFormUpdatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3011935335988580535),
        name: 'categoryFormActive',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2395836971727926811),
        name: 'categoryId',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'form',
        srcEntity: 'FormModel',
        srcField: 'categoryForm',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 840176663917475305),
    name: 'FormModel',
    lastPropertyId: const obx_int.IdUid(9, 6267931215202466945),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 256862831634139434),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6875703083948877537),
        name: 'formName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2295156702775157012),
        name: 'formImage',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 46748583338434363),
        name: 'formUpdatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8751431503724326421),
        name: 'formActive',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4005107395605907619),
        name: 'pdfPath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1338494067676315839),
        name: 'favorite',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 5212007686940785585),
        name: 'categoryFormId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 1704605792094889468),
        relationTarget: 'CategoryFormModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 6267931215202466945),
        name: 'formId',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 840176663917475305),
    lastIndexId: const obx_int.IdUid(1, 1704605792094889468),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    CategoryFormModel: obx_int.EntityDefinition<CategoryFormModel>(
      model: _entities[0],
      toOneRelations: (CategoryFormModel object) => [],
      toManyRelations: (CategoryFormModel object) => {
        obx_int.RelInfo<FormModel>.toOneBacklink(
          8,
          object.id,
          (FormModel srcObject) => srcObject.categoryForm,
        ): object.form,
      },
      getId: (CategoryFormModel object) => object.id,
      setId: (CategoryFormModel object, int id) {
        object.id = id;
      },
      objectToFB: (CategoryFormModel object, fb.Builder fbb) {
        final categoryFormNameOffset = fbb.writeString(object.categoryFormName);
        final categoryFormFullNameOffset = fbb.writeString(
          object.categoryFormFullName,
        );
        final categoryFormImageOffset = object.categoryFormImage == null
            ? null
            : fbb.writeString(object.categoryFormImage!);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, categoryFormNameOffset);
        fbb.addOffset(2, categoryFormFullNameOffset);
        fbb.addOffset(3, categoryFormImageOffset);
        fbb.addInt64(4, object.categoryFormUpdatedAt?.millisecondsSinceEpoch);
        fbb.addBool(5, object.categoryFormActive);
        fbb.addInt64(6, object.categoryId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final categoryFormUpdatedAtValue = const fb.Int64Reader()
            .vTableGetNullable(buffer, rootOffset, 12);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final categoryIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        final categoryFormNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final categoryFormFullNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final categoryFormImageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final categoryFormUpdatedAtParam = categoryFormUpdatedAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(categoryFormUpdatedAtValue);
        final categoryFormActiveParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          14,
          false,
        );
        final object = CategoryFormModel(
          id: idParam,
          categoryId: categoryIdParam,
          categoryFormName: categoryFormNameParam,
          categoryFormFullName: categoryFormFullNameParam,
          categoryFormImage: categoryFormImageParam,
          categoryFormUpdatedAt: categoryFormUpdatedAtParam,
          categoryFormActive: categoryFormActiveParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<CategoryFormModel>(
          object.form,
          store,
          obx_int.RelInfo<FormModel>.toOneBacklink(
            8,
            object.id,
            (FormModel srcObject) => srcObject.categoryForm,
          ),
        );
        return object;
      },
    ),
    FormModel: obx_int.EntityDefinition<FormModel>(
      model: _entities[1],
      toOneRelations: (FormModel object) => [object.categoryForm],
      toManyRelations: (FormModel object) => {},
      getId: (FormModel object) => object.id,
      setId: (FormModel object, int id) {
        object.id = id;
      },
      objectToFB: (FormModel object, fb.Builder fbb) {
        final formNameOffset = fbb.writeString(object.formName);
        final formImageOffset = object.formImage == null
            ? null
            : fbb.writeString(object.formImage!);
        final pdfPathOffset = fbb.writeString(object.pdfPath);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, formNameOffset);
        fbb.addOffset(2, formImageOffset);
        fbb.addInt64(3, object.formUpdatedAt?.millisecondsSinceEpoch);
        fbb.addBool(4, object.formActive);
        fbb.addOffset(5, pdfPathOffset);
        fbb.addBool(6, object.favorite);
        fbb.addInt64(7, object.categoryForm.targetId);
        fbb.addInt64(8, object.formId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final formUpdatedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final formIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        final formNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final formImageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final formUpdatedAtParam = formUpdatedAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(formUpdatedAtValue);
        final formActiveParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          12,
          false,
        );
        final pdfPathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final favoriteParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          16,
          false,
        );
        final object = FormModel(
          id: idParam,
          formId: formIdParam,
          formName: formNameParam,
          formImage: formImageParam,
          formUpdatedAt: formUpdatedAtParam,
          formActive: formActiveParam,
          pdfPath: pdfPathParam,
          favorite: favoriteParam,
        );
        object.categoryForm.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        object.categoryForm.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CategoryFormModel] entity fields to define ObjectBox queries.
class CategoryFormModel_ {
  /// See [CategoryFormModel.id].
  static final id = obx.QueryIntegerProperty<CategoryFormModel>(
    _entities[0].properties[0],
  );

  /// See [CategoryFormModel.categoryFormName].
  static final categoryFormName = obx.QueryStringProperty<CategoryFormModel>(
    _entities[0].properties[1],
  );

  /// See [CategoryFormModel.categoryFormFullName].
  static final categoryFormFullName =
      obx.QueryStringProperty<CategoryFormModel>(_entities[0].properties[2]);

  /// See [CategoryFormModel.categoryFormImage].
  static final categoryFormImage = obx.QueryStringProperty<CategoryFormModel>(
    _entities[0].properties[3],
  );

  /// See [CategoryFormModel.categoryFormUpdatedAt].
  static final categoryFormUpdatedAt = obx.QueryDateProperty<CategoryFormModel>(
    _entities[0].properties[4],
  );

  /// See [CategoryFormModel.categoryFormActive].
  static final categoryFormActive = obx.QueryBooleanProperty<CategoryFormModel>(
    _entities[0].properties[5],
  );

  /// See [CategoryFormModel.categoryId].
  static final categoryId = obx.QueryIntegerProperty<CategoryFormModel>(
    _entities[0].properties[6],
  );

  /// see [CategoryFormModel.form]
  static final form = obx.QueryBacklinkToMany<FormModel, CategoryFormModel>(
    FormModel_.categoryForm,
  );
}

/// [FormModel] entity fields to define ObjectBox queries.
class FormModel_ {
  /// See [FormModel.id].
  static final id = obx.QueryIntegerProperty<FormModel>(
    _entities[1].properties[0],
  );

  /// See [FormModel.formName].
  static final formName = obx.QueryStringProperty<FormModel>(
    _entities[1].properties[1],
  );

  /// See [FormModel.formImage].
  static final formImage = obx.QueryStringProperty<FormModel>(
    _entities[1].properties[2],
  );

  /// See [FormModel.formUpdatedAt].
  static final formUpdatedAt = obx.QueryDateProperty<FormModel>(
    _entities[1].properties[3],
  );

  /// See [FormModel.formActive].
  static final formActive = obx.QueryBooleanProperty<FormModel>(
    _entities[1].properties[4],
  );

  /// See [FormModel.pdfPath].
  static final pdfPath = obx.QueryStringProperty<FormModel>(
    _entities[1].properties[5],
  );

  /// See [FormModel.favorite].
  static final favorite = obx.QueryBooleanProperty<FormModel>(
    _entities[1].properties[6],
  );

  /// See [FormModel.categoryForm].
  static final categoryForm =
      obx.QueryRelationToOne<FormModel, CategoryFormModel>(
        _entities[1].properties[7],
      );

  /// See [FormModel.formId].
  static final formId = obx.QueryIntegerProperty<FormModel>(
    _entities[1].properties[8],
  );
}
